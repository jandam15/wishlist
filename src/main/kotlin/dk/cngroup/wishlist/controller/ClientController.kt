package dk.cngroup.wishlist.controller

import dk.cngroup.wishlist.entity.Client
import dk.cngroup.wishlist.entity.ClientRepository
import dk.cngroup.wishlist.entity.Product
import dk.cngroup.wishlist.entity.ProductRepository
import org.springframework.data.rest.webmvc.PersistentEntityResource
import org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler
import org.springframework.data.rest.webmvc.RepositoryRestController
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RestController

// enhancement of /clients endpoint generated by Spring Data REST
@RepositoryRestController
class ClientController(private val repository: ClientRepository) {

    // custom method returning loaded entity in Spring HATEOAS way
    @GetMapping("/clients/search/findByUserName")
    fun getByName(
        @RequestParam userName: String,
        resourceAssembler: PersistentEntityResourceAssembler
    ): ResponseEntity<PersistentEntityResource> {
        val client = repository.findClientByUserName(userName)
        return ResponseEntity.ok(resourceAssembler.toFullResource(client))
    }
}

@RestController
class ClientSearchController(
    private val productRepository: ProductRepository,
    private val clientRepository: ClientRepository
) {
    @GetMapping("clients/search/findByProduct")
    fun getByProduct(
        @RequestParam code: String
    ): ResponseEntity<out Any?> {
        //get products by code
        val productsByCode = productRepository.findByCodeStartingWithIgnoreCase(code)

        //get clients and their wishlist
        val clients = clientRepository.findByIdIsNotNull()
        val result = mutableListOf<Client>()

        var productsOnWishlist = mutableListOf<Product>()
        var toNextClient = false
        for (client in clients) {
            productsOnWishlist = client.wishes[0].products
            for (i in 0 until productsOnWishlist.size) {
                for (j in 0 until productsByCode.size) {
                    if (productsOnWishlist[i].code == productsByCode[j].code) {
                        result += client
                        toNextClient = true
                        break
                    }
                }
                if (toNextClient) break
            }
            toNextClient = false
        }

        if (result.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body("No client has product with desired code on wishlist")
        }
        return ResponseEntity.ok(result)
    }
}
package dk.cngroup.wishlist.controller

import dk.cngroup.wishlist.entity.ClientRepository
import org.springframework.data.domain.Pageable
import org.springframework.data.rest.webmvc.PersistentEntityResource
import org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler
import org.springframework.data.rest.webmvc.RepositoryRestController
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestParam

// enhancement of /clients endpoint generated by Spring Data REST
@RepositoryRestController
class ClientController(private val repository: ClientRepository) {

    // custom method returning loaded entity in Spring HATEOAS way
    @GetMapping("/clients/search/findByUserName")
    fun getByName(
        @RequestParam userName: String,
        resourceAssembler: PersistentEntityResourceAssembler
    ): ResponseEntity<PersistentEntityResource> {
        val client = repository.findClientByUserName(userName)
        return ResponseEntity.ok(resourceAssembler.toFullResource(client))
    }

    @GetMapping("clients/search/findByProduct")
    fun getByProduct(
        @RequestParam code: String,
        pagination: Pageable
    ): ResponseEntity<out Any>? {
        val clients = repository.findByWishesProductsCodeStartingWithIgnoreCaseOrderByLastName(
            code = code,
            pagination = pagination
        )
        for (client in clients) {
            val products = client.wishes[0].products.filter { it.code.startsWith(code, ignoreCase = true) }
            client.productCode = products.joinToString(separator = ";") { it.code }
        }
        /*
        val codePattern = "$code%"
        val clients = repository.getClientsByProduct(codePattern, pagination)
        */
        if (clients.isEmpty) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body("No client has product with desired code on wishlist")
        }


        return ResponseEntity.ok(clients)
    }
}